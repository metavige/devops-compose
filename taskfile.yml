version: '3'

dotenv:
  - .env

vars:
  ROOT_DIR:
    sh: pwd
  NETWORK_FILE: "{{.ROOT_DIR}}/docker-compose.network.yaml"

tasks:

  default:
    desc: 顯示可用指令和服務狀態
    cmds:
      - task: info

  info:
    desc: 顯示服務資訊
    cmds:
      - echo "🎉 DevOps Compose 可用指令："
      - echo ""
      - echo "核心服務:"
      - echo "  • task start:core     - 啟動核心服務 (Traefik + Registry)"
      - echo "  • task stop:core      - 停止核心服務"
      - echo ""
      - echo "基礎設施層:"
      - echo "  • task start:postgres - 啟動 PostgreSQL"
      - echo "  • task start:redis    - 啟動 Redis"
      - echo "  • task start:mysql    - 啟動 MySQL"
      - echo ""
      - echo "開發層:"
      - echo "  • task start:gitlab   - 啟動 GitLab"
      - echo "  • task start:jenkins  - 啟動 Jenkins"
      - echo "  • task start:nexus    - 啟動 Nexus"
      - echo ""
      - echo "通用指令:"
      - echo "  • task start SERVICE  - 啟動指定服務"
      - echo "  • task stop SERVICE   - 停止指定服務"
      - echo "  • task status SERVICE - 查看服務狀態"
      - echo ""
      - echo "服務管理:"
      - echo "  • task list           - 列出所有可用服務"
      - echo "  • task search KEYWORD - 搜尋服務"

  list:
    desc: 列出所有可用服務
    cmds:
      - task: .list-services

  search:
    desc: 搜尋服務
    cmds:
      - task: .search-services
        vars:
          KEYWORD: "{{.CLI_ARGS}}"

  # 核心服務
  start:core:
    desc: 啟動核心基礎服務
    cmds:
      - ./scripts/start-core.sh

  stop:core:
    desc: 停止核心基礎服務
    cmds:
      - ./scripts/stop-core.sh

  # 基礎設施層服務快捷指令
  start:postgres:
    desc: 啟動 PostgreSQL
    cmds:
      - task: start
        vars: { SERVICE: "infrastructure/storage/postgres" }

  start:redis:
    desc: 啟動 Redis
    cmds:
      - task: start
        vars: { SERVICE: "infrastructure/storage/redis" }

  start:mysql:
    desc: 啟動 MySQL
    cmds:
      - task: start
        vars: { SERVICE: "infrastructure/storage/mysql" }

  # 開發層服務快捷指令
  start:gitlab:
    desc: 啟動 GitLab
    cmds:
      - task: start
        vars: { SERVICE: "development/scm/gitlab" }

  start:jenkins:
    desc: 啟動 Jenkins
    cmds:
      - task: start
        vars: { SERVICE: "development/cicd/jenkins" }

  start:nexus:
    desc: 啟動 Nexus
    cmds:
      - task: start
        vars: { SERVICE: "development/quality/nexus" }

  # 通用服務管理指令
  start:
    desc: 啟動指定服務
    cmds:
      - task: .service-cmd
        vars:
          SERVICE: "{{.SERVICE | default .CLI_ARGS}}"
          CMD: "up -d"

  stop:
    desc: 停止指定服務
    cmds:
      - task: .service-cmd
        vars:
          SERVICE: "{{.SERVICE | default .CLI_ARGS}}"
          CMD: "stop"

  down:
    desc: 完全停止指定服務 (包含移除容器)
    cmds:
      - task: .service-cmd
        vars:
          SERVICE: "{{.SERVICE | default .CLI_ARGS}}"
          CMD: "down"

  restart:
    desc: 重啟指定服務
    cmds:
      - task: .service-cmd
        vars:
          SERVICE: "{{.SERVICE | default .CLI_ARGS}}"
          CMD: "restart"

  status:
    desc: 查看指定服務狀態
    cmds:
      - task: .service-cmd
        vars:
          SERVICE: "{{.SERVICE | default .CLI_ARGS}}"
          CMD: "ps"

  logs:
    desc: 查看指定服務日誌
    cmds:
      - task: .service-cmd
        vars:
          SERVICE: "{{.SERVICE | default .CLI_ARGS}}"
          CMD: "logs -f"

  # 內部指令
  .service-cmd:
    internal: true
    desc: 執行服務 Docker Compose 指令
    vars:
      RESOLVED_SERVICE:
        sh: |
          SERVICE="{{.SERVICE}}"
          if [ -z "$SERVICE" ]; then
            echo "請指定服務名稱"
            exit 1
          fi

          # 如果是完整路徑，直接使用
          if [ -f "{{.ROOT_DIR}}/$SERVICE/docker-compose.yml" ]; then
            echo "$SERVICE"
            exit 0
          fi

          # 搜尋短名稱
          FOUND=$(find {{.ROOT_DIR}} -name "docker-compose.yml" -type f | grep -E "/$SERVICE/docker-compose.yml$" | head -1)
          if [ -n "$FOUND" ]; then
            echo "$FOUND" | sed 's|{{.ROOT_DIR}}/||' | sed 's|/docker-compose.yml||'
            exit 0
          fi

          # 模糊搜尋（包含該名稱的服務）
          FOUND=$(find {{.ROOT_DIR}} -name "docker-compose.yml" -type f | grep -E "/[^/]*$SERVICE[^/]*/docker-compose.yml$" | head -1)
          if [ -n "$FOUND" ]; then
            echo "$FOUND" | sed 's|{{.ROOT_DIR}}/||' | sed 's|/docker-compose.yml||'
            exit 0
          fi

          echo "找不到服務: $SERVICE"
          exit 1
      SERVICE_DIR: "{{.ROOT_DIR}}/{{.RESOLVED_SERVICE}}"
      COMPOSE_FILE: "{{.SERVICE_DIR}}/docker-compose.yml"
    preconditions:
      - sh: test -n "{{.SERVICE}}"
        msg: "請指定服務名稱，例如: task start nexus 或 task start infrastructure/storage/postgres"
      - sh: test -f "{{.COMPOSE_FILE}}"
        msg: "找不到服務配置檔案: {{.COMPOSE_FILE}}"
    cmds:
      - |
        echo "🔍 解析服務: {{.SERVICE}} → {{.RESOLVED_SERVICE}}"
        if [ -f "{{.NETWORK_FILE}}" ]; then
          docker compose --project-directory "{{.SERVICE_DIR}}" -f "{{.NETWORK_FILE}}" -f "{{.SERVICE_DIR}}/docker-compose.yml" {{.CMD}}
        else
          docker compose --project-directory "{{.SERVICE_DIR}}" -f "{{.SERVICE_DIR}}/docker-compose.yml" {{.CMD}}
        fi

  .list-services:
    internal: true
    desc: 列出所有可用服務
    cmds:
      - |
        echo "📋 可用服務列表："
        echo ""
        echo "📂 按分層分類："

        # 核心服務
        echo "🔧 核心服務:"
        if [ -f "{{.ROOT_DIR}}/core/docker-compose.yml" ]; then
          echo "  • core (Traefik + Registry Mirror)"
        fi
        echo ""

        # 基礎設施層
        echo "🏗️ 基礎設施層:"
        find {{.ROOT_DIR}}/infrastructure -name "docker-compose.yml" -type f 2>/dev/null | while read file; do
          service_path=$(echo "$file" | sed 's|{{.ROOT_DIR}}/||' | sed 's|/docker-compose.yml||')
          service_name=$(basename "$service_path")
          echo "  • $service_name ($service_path)"
        done
        echo ""

        # 平台層
        echo "🔧 平台層:"
        find {{.ROOT_DIR}}/platform -name "docker-compose.yml" -type f 2>/dev/null | while read file; do
          service_path=$(echo "$file" | sed 's|{{.ROOT_DIR}}/||' | sed 's|/docker-compose.yml||')
          service_name=$(basename "$service_path")
          echo "  • $service_name ($service_path)"
        done
        echo ""

        # 開發層
        echo "💻 開發層:"
        find {{.ROOT_DIR}}/development -name "docker-compose.yml" -type f 2>/dev/null | while read file; do
          service_path=$(echo "$file" | sed 's|{{.ROOT_DIR}}/||' | sed 's|/docker-compose.yml||')
          service_name=$(basename "$service_path")
          echo "  • $service_name ($service_path)"
        done
        echo ""

        # 應用層
        echo "🚀 應用層:"
        find {{.ROOT_DIR}}/applications -name "docker-compose.yml" -type f 2>/dev/null | while read file; do
          service_path=$(echo "$file" | sed 's|{{.ROOT_DIR}}/||' | sed 's|/docker-compose.yml||')
          service_name=$(basename "$service_path")
          echo "  • $service_name ($service_path)"
        done
        echo ""

        echo "💡 使用方式："
        echo "  • 短名稱: task start nexus"
        echo "  • 完整路徑: task start development/quality/nexus"

  .search-services:
    internal: true
    desc: 搜尋服務
    vars:
      KEYWORD: "{{.KEYWORD}}"
    preconditions:
      - sh: test -n "{{.KEYWORD}}"
        msg: "請提供搜尋關鍵字，例如: task search nexus"
    cmds:
      - |
        echo "🔍 搜尋結果: '{{.KEYWORD}}'"
        echo ""

        FOUND=0
        find {{.ROOT_DIR}} -name "docker-compose.yml" -type f | while read file; do
          service_path=$(echo "$file" | sed 's|{{.ROOT_DIR}}/||' | sed 's|/docker-compose.yml||')
          service_name=$(basename "$service_path")

          # 檢查服務名稱或路徑是否包含關鍵字
          if echo "$service_name" | grep -qi "{{.KEYWORD}}" || echo "$service_path" | grep -qi "{{.KEYWORD}}"; then
            echo "✓ $service_name ($service_path)"
            FOUND=1
          fi
        done

        if [ $FOUND -eq 0 ]; then
          echo "❌ 未找到包含 '{{.KEYWORD}}' 的服務"
          echo ""
          echo "💡 提示: 使用 'task list' 查看所有可用服務"
        else
          echo ""
          echo "💡 使用方式："
          echo "  • task start <服務名稱>"
          echo "  • task status <服務名稱>"
        fi