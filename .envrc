# DevOps Compose 自動環境設定
# 使用 direnv 自動載入環境變數和啟動核心服務
#
# 安裝 direnv: brew install direnv
# 設定 shell: eval "$(direnv hook bash)" 加入 ~/.bashrc
# 允許此目錄: direnv allow

# 載入環境變數
if [ -f .env ]; then
    dotenv .env
fi

# 設定路徑
PATH_add scripts

# 檢查核心服務狀態
check_core_services() {
    if ! docker compose -f core/docker-compose.yml ps --quiet | grep -q .; then
        echo "🚀 核心服務未運行，使用 './scripts/start-core.sh' 啟動"
        return 1
    fi
    return 0
}

# 顯示歡迎訊息
welcome_message() {
    echo "🎉 歡迎使用 DevOps Compose!"
    echo ""
    echo "📋 可用指令:"
    echo "  • 初始化環境:     ./init.sh"
    echo "  • 啟動核心服務:   start-core.sh"
    echo "  • 停止核心服務:   stop-core.sh"
    echo "  • 啟動服務:       make start service=<service>"
    echo "  • 或使用 Task:     task start:<service>"
    echo ""
    echo "🌐 服務連結 (需先啟動核心服務):"
    echo "  • Traefik:  https://traefik.docker.internal"
    echo "  • Registry: https://registry.docker.internal"
    echo "  • Whoami:   https://whoami.docker.internal"
    echo ""
}

welcome_message

# 如果核心服務未運行，提示用戶
if ! check_core_services; then
    echo "💡 提示: 大多數服務需要核心服務運行才能正常工作"
fi